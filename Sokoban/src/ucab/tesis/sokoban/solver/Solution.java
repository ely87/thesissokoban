package ucab.tesis.sokoban.solver;

import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import android.util.Log;

public class Solution {

	//TODO peticion al servidor de la resolucion del problema.
	public static List<Path> getSolution(int h,int w,String lvl){
		
		//String solution = "[(3,4,1), (6,6,1), (8,7,2), (5,5,3), (4,5,3), (3,5,3), (2,5,3), (3,5,0), (3,6,0), (3,7,0), (3,8,0), (3,9,0), (3,10,0), (7,5,3), (6,5,3), (5,5,3), (4,5,3), (3,5,3), (3,6,0), (3,7,0), (6,5,1), (3,11,0), (6,4,1), (3,5,2), (4,5,2), (5,5,2), (3,3,0), (3,4,0), (6,5,0), (6,6,0), (6,5,1), (6,4,1), (4,5,3), (3,5,3), (2,5,3), (7,7,3), (3,5,2), (4,5,2), (5,5,2), (6,5,2), (7,5,2), (8,5,2), (6,7,3), (6,6,1), (7,5,3), (6,5,3), (5,5,3), (4,5,3), (3,5,3), (2,5,3), (3,6,1), (3,5,2), (4,5,2), (5,5,2), (6,5,2), (7,5,2), (8,5,2), (3,3,1), (3,2,1), (3,12,0), (3,13,0), (3,14,0), (3,15,0), (4,15,2), (4,16,0), (4,17,0), (3,7,0), (3,8,0), (3,9,0), (6,5,0), (5,5,3), (4,5,3), (3,5,3), (3,4,1), (7,5,3), (6,5,3), (5,5,3), (4,5,3), (3,5,3), (2,5,3), (3,10,0), (3,5,0), (3,6,0), (3,7,0), (6,5,1), (6,4,1), (6,5,0), (7,5,2), (8,5,2), (3,5,2), (3,3,0), (3,6,1), (7,5,3), (6,5,3), (6,4,1), (4,5,2), (5,5,2), (6,5,2), (7,5,2), (8,5,2), (3,2,1), (3,3,0), (3,4,0), (6,5,0), (6,6,0), (6,5,1), (6,4,1), (7,5,3), (6,5,3), (5,5,3), (4,5,3), (3,5,3), (2,5,3), (3,3,1), (3,2,1), (3,11,0), (3,12,0), (3,13,0), (3,14,0), (3,15,0), (3,16,0), (3,17,0), (3,7,0), (3,8,0), (3,9,0), (3,10,0), (3,11,0), (3,12,0), (3,13,0), (3,14,0), (3,15,0), (2,15,3), (2,16,0), (2,17,0), (6,5,0), (5,5,3), (4,5,3), (3,5,3), (3,6,0), (3,7,0), (3,8,0), (3,9,0), (3,10,0), (3,11,0), (3,12,0), (3,13,0), (3,14,0), (3,15,0), (4,15,2), (4,16,0), (3,5,2), (3,6,0), (3,7,0), (3,8,0), (3,9,0), (3,10,0), (3,11,0), (3,12,0), (3,13,0), (3,14,0), (3,15,0), (3,16,0), (3,3,0), (3,4,0), (3,5,0), (3,6,0), (3,7,0), (3,8,0), (3,9,0), (3,10,0), (3,11,0), (3,12,0), (3,13,0), (3,14,0), (3,15,0), (2,15,3), (2,16,0)]";
		
		//String solution = "[(4,6,0), (4,5,1), (4,4,1), (4,3,1), (4,2,1), (4,1,1), (1,4,1), (1,3,1), (1,2,1), (1,1,1)]";
		String solution = "[(6,3,0), (5,3,1), (5,2,1), (4,2,3), (3,2,3), (2,2,3), (3,2,2), (4,2,2), (5,2,2), (6,2,2), (5,3,3), (5,2,1)]";
		//String solution = "[(4,1,2), (2,3,1), (2,2,1), (3,2,2), (3,1,3), (2,1,3), (4,2,2), (4,3,0), (4,4,0), (3,1,2)]";
		List<Path> ret = new ArrayList<Path>();
		solution = solution.substring(1);
		solution = solution.substring(0, solution.length()-1);
		
		StringTokenizer st = new StringTokenizer(solution,"()");
		StringTokenizer innerSt = new StringTokenizer(",");
		
		while(st.hasMoreTokens()){
			innerSt = new StringTokenizer(st.nextToken(),",");
			if(innerSt.countTokens() != 3)
				continue;
			ret.add(new Path(new Position(Integer.parseInt(innerSt.nextToken()),Integer.parseInt(innerSt.nextToken())),Integer.parseInt(innerSt.nextToken())));
		}
		Log.i("test",ret.toString());
		return ret;
	}
	
}
